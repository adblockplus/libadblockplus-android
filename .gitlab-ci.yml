image: "registry.gitlab.com/eyeo/docker/libadblockplus-android_hermes_gitlab-runner:202105.1"
stages:
  - lint
  - unit_test
  - build
  - device_tests
  - publish

checkstyle:
  interruptible: true
  stage: lint
  image: registry.gitlab.com/eyeo/docker/gitlab-codequality:21.01
  script:
    # Run checkstyle with our config against all java files
    - checkstyle --exclude=.git -c config/checkstyle/checkstyle.xml -f xml $(find . -name "*.java") -o checkstyle-report.xml || true
    # Change the paths to relative in the output so gitlab can link them properly
    - sed -i -e "s|$(pwd)/./||g" checkstyle-report.xml
    # Convert the checkstyle output to code-climate format so gitlab can parse it
    - |
      violations-command-line \
        -detail-level COMPACT \
        -code-climate code-climate-report.json \
        --violations "CHECKSTYLE" "$(pwd)" ".*checkstyle-report.xml" "Checkstyle"
  artifacts:
    reports:
      codequality:
        - code-climate-report.json

gradle_unit_tests:
  stage: unit_test
  interruptible: true
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - &apt-install apt-get update && apt-get install -y ninja-build libicu-dev nodejs git
    - &npm_path npm list glob || npm install -g glob ; export NPM_PATH=`which npm` ; export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
    - gradle test --stacktrace
  # RUN ONLY MANUALLY, the tests are broken fore Hermes right now
  only:
    - web
  artifacts:
    reports:
      junit: adblock-android/build/test-results/*/TEST-*.xml

build_libadblockplus-android:all:
  stage: build
  interruptible: true
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - *apt-install
    - *npm_path
    - gradle clean assemble assembleAndroidTest
  # won't run for manual and scheduled; we'd like to run
  # `build_libadblockplus-android:all-and-test-release` instead
  except:
    - schedules
    - web
  artifacts:
    when: always
    paths:
      - adblock-android-webviewapp/build/outputs/apk/release/adblock-android-webviewapp-release-unsigned.apk
      - adblock-android-webviewapp/build/outputs/apk/debug/adblock-android-webviewapp-debug.apk
      # The test APKs are used later in the device testing
      - adblock-android/build/outputs/apk/androidTest/abi_all/debug/adblock-android-abi_all-debug-androidTest.apk
      - adblock-android-webview/build/outputs/apk/androidTest/debug/adblock-android-webview-debug-androidTest.apk
      - adblock-android-webviewapp/build/outputs/apk/androidTest/debug/adblock-android-webviewapp-debug-androidTest.apk
      - adblock-android/build/outputs/aar/adblock-android-abi_x86-release.aar
      - adblock-android/build/outputs/aar/adblock-android-abi_x86_64-release.aar
      - adblock-android/build/outputs/aar/adblock-android-abi_arm64-release.aar
      - adblock-android/build/outputs/aar/adblock-android-abi_arm-release.aar
      - adblock-android/build/outputs/aar/adblock-android-abi_all-release.aar
      - adblock-android-webview/build/outputs/aar/adblock-android-webview-release.aar
      - adblock-android-settings/build/outputs/aar/adblock-android-settings-release.aar
      - adblock-android-benchmark/build/outputs/aar/adblock-android-benchmark-release.aar
      - hermes-libs/build
    exclude:
      - hermes-libs/build/**/*.a
      - hermes-libs/build/**/*.o
      - hermes-libs/build/**/*.so


# Builds additional release test apk for performance testing at nightly runs
build_libadblockplus-android:all-and-test-release:
  stage: build
  variables:
    PATH_TO_RELEASE_APK: "adblock-android-webview/build/outputs/apk/androidTest/release/adblock-android-webview-release-androidTest.apk"
  script:
    - *apt-install
    - *npm_path
    # we are building release apk as a separate call since we also need a debug test apk
    - gradle clean assemble assembleAndroidTest && gradle assembleAndroidTest -PtestBuildType=release
    # sign test apk with debug key
    - jarsigner -keystore ~/.android/debug.keystore -storepass android -keypass android ${PATH_TO_RELEASE_APK} androiddebugkey
  artifacts:
    paths:
      - adblock-android-webviewapp/build/outputs/apk/release/adblock-android-webviewapp-release-unsigned.apk
      - adblock-android-webviewapp/build/outputs/apk/debug/adblock-android-webviewapp-debug.apk
      # The test APKs are used later in the device testing
      - $PATH_TO_RELEASE_APK
      - adblock-android/build/outputs/apk/androidTest/abi_all/debug/adblock-android-abi_all-debug-androidTest.apk
      - adblock-android-webview/build/outputs/apk/androidTest/debug/adblock-android-webview-debug-androidTest.apk
      - adblock-android-webviewapp/build/outputs/apk/androidTest/debug/adblock-android-webviewapp-debug-androidTest.apk
      - adblock-android-benchmark/build/outputs/apk/androidTest/release/adblock-android-benchmark-release-androidTest.apk
      - adblock-android/build/outputs/aar/adblock-android-abi_x86-release.aar
      - adblock-android/build/outputs/aar/adblock-android-abi_x86_64-release.aar
      - adblock-android/build/outputs/aar/adblock-android-abi_arm64-release.aar
      - adblock-android/build/outputs/aar/adblock-android-abi_arm-release.aar
      - adblock-android/build/outputs/aar/adblock-android-abi_all-release.aar
      - adblock-android-webview/build/outputs/aar/adblock-android-webview-release.aar
      - adblock-android-settings/build/outputs/aar/adblock-android-settings-release.aar
      - adblock-android-benchmark/build/outputs/aar/adblock-android-benchmark-release.aar

  only:
    - schedules
    - web
    - tags

build_libadblockplus-android:abp-disabled:
  stage: build
  script:
    - *apt-install
    - *npm_path
    # APK with adblock disabled, with a random appId
    - gradle clean assemble -PadblockEnabled=false -PrandomizedAppId=true
    # Rename the APKs to avoid confusion
    - mv adblock-android-webviewapp/build/outputs/apk/release/adblock-android-webviewapp-release-unsigned{,-ADBLOCK-DISABLED}.apk
    - mv adblock-android-webviewapp/build/outputs/apk/debug/adblock-android-webviewapp-debug{,-ADBLOCK-DISABLED}.apk
  artifacts:
    paths:
      - adblock-android-webviewapp/build/outputs/apk/debug/adblock-android-webviewapp-debug-ADBLOCK-DISABLED.apk
      - adblock-android-webviewapp/build/outputs/apk/release/adblock-android-webviewapp-release-unsigned-ADBLOCK-DISABLED.apk
  when: manual

# The remaining build_* jobs are only built on rc branches
# They are run only to test that the build works, we dont use the artefacts
.onlyrcbuilds: &onlyrc
  only:
    - /^.*-rc[0-9]+$/

build_libadblockplus-android:arm:
  stage: build
  <<: *onlyrc
  script:
    - *apt-install
    - *npm_path
    - gradle clean assembleAbi_arm

build_libadblockplus-android:arm64:
  stage: build
  <<: *onlyrc
  script:
    - *apt-install
    - *npm_path
    - gradle clean assembleAbi_arm64

build_libadblockplus-android:x86:
  stage: build
  <<: *onlyrc
  script:
    - *apt-install
    - *npm_path
    - gradle clean assembleAbi_x86

build_libadblockplus-android:custom-jni:
  stage: build
  <<: *onlyrc
  script:
    - *apt-install
    - *npm_path
    - LIBABP_SHARED_LIBRARY_NAME=adblockplus gradle clean assembleAbi_arm

build_libadblockplus-android:without-jni:
  stage: build
  interruptible: true
  # Custom cache definition for this job
  cache:
    key: $CI_COMMIT_REF_NAME
    paths:
      # Don't get dependencies because current dependencies are merely libadblockplus but we don't need it.
      # If the parameter is working correctly then the building should succeed without libadblockplus.
      - buildtools/
    policy: pull
  <<: *onlyrc
  script:
    - *apt-install
    - *npm_path
    - SKIP_JNI_COMPILATION=true gradle clean assemble

# These are the instrumented tests that run on the real devices on https://saucelabs.com TestObject.
# @LargeTest tests are skipped in this job
testobject_tests:
  stage: device_tests
  interruptible: true
  retry: 1
  variables:
    # Space-separated list of devices to run tests against
    TEST_DEVICES: "Samsung_Galaxy_S20_real Google_Pixel_5_real OnePlus_Nord_real"
    GIT_STRATEGY: "none"
  script:
    - test -z ${TESTOBJ_PROJECT_KEY} && echo "echo TESTOBJ_PROJECT_KEY not set. Unable to run tests." && exit 1
    - test -f /opt/ci/runner.jar || wget --no-verbose https://s3.amazonaws.com/saucelabs-runner/v1.8/runner.jar -O /opt/ci/runner.jar
    # Docs for running tests on testobject:
    # https://wiki.saucelabs.com/display/DOCS/Command+Reference+for+Sauce+Runner+for+Real+Devices
    # Note - we start all tests concurrently and `wait` for them to finish. Non-zero exit codes are preserved.
    - |
      mkdir test-results
      pids=""
      for TEST_DEVICE in $TEST_DEVICES
        do for APK in $(find . -name "*androidTest.apk")
          do echo "Testing $APK"
          java -jar /opt/ci/runner.jar espresso \
            --test $APK \
            --app ./adblock-android-webviewapp/build/outputs/apk/debug/adblock-android-webviewapp-debug.apk \
            --testname ${CI_JOB_URL} \
            --e notAnnotation androidx.test.filters.LargeTest \
            --device ${TEST_DEVICE} \
            --xmlFolder test-results/${TEST_DEVICE}/ \
            --apikey ${TESTOBJ_PROJECT_KEY} --datacenter EU &
          pids="$pids $!"
        done
      done
      wait $pids
  artifacts:
    when: always
    reports:
      junit: test-results/*/philll-adblockwebview-app-*.xml

# automated regression tests template using Appium
.template_automation:
  stage: device_tests
  interruptible: true
  retry: 1
  variables:
    GIT_STRATEGY: "none"
    # overridable automation repo; url uses CI_JOB_TOKEN for temporary authorization
    GIT_AUTOMATION_REPO: "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/eyeo/sandbox/abp-webview-test-automation"
    GIT_AUTOMATION_BRANCH: "master"
    # demo app debug apk
    TEST_APK: "adblock-android-webviewapp/build/outputs/apk/debug/adblock-android-webviewapp-debug.apk"
  script:
    - export NPM_PATH=`which npm`
    - apt-get update && apt-get install -y ninja-build libicu-dev
    # TESTOBJ_PROJECT_KEY should exist, testing it
    - test -z ${TESTOBJ_PROJECT_KEY} && echo "echo TESTOBJ_PROJECT_KEY not set. Unable to run tests." && exit 1
    # we are not using submodules, because automation is not a part of repository functionality
    # its rather a standalone set of scripts
    - git clone $GIT_AUTOMATION_REPO automation
    - cd automation
    - git checkout ${GIT_AUTOMATION_BRANCH:-master}
    # Launch an instance of gradle for each bunch of tags we want to test
    - set +e
    - pids=""
    - |
      for PLATFORM_VERSION in $PLATFORM_VERSIONS
        do export PLATFORM_VERSION
        echo Starting job for version ${PLATFORM_VERSION}
        (gradle ${GRADLE_TASK} &> platform_version-${PLATFORM_VERSION}.log ; echo $? > result_${PLATFORM_VERSION}) &
        pids="$pids $!"
      done
    - wait $pids
    # Check for any failures and re-run them
    - |
      for PLATFORM_VERSION in $PLATFORM_VERSIONS
        do if [ -s target/rerun${PLATFORM_VERSION}.txt ] ; then
          echo "Rerunning failed test cases for platform version ${PLATFORM_VERSION}"
          mv target/rerun${PLATFORM_VERSION}.txt target/rerun.txt
          gradle rerunFailed
          echo $? > result_${PLATFORM_VERSION}
          rm -f target/rerun.txt
        fi
      done
    # check the exit codes of all processes were 0
    - |
      for PLATFORM_VERSION in $PLATFORM_VERSIONS
        do test $(cat result_${PLATFORM_VERSION}) = 0
      done
  after_script:
    - cd automation
    - |
      for PLATFORM_VERSION in $PLATFORM_VERSIONS
        do
        echo "**********************************"
        echo "Logs for tests with platform version ${PLATFORM_VERSION}"
        echo "**********************************"
        cat platform_version-${PLATFORM_VERSION}.log
      done
  artifacts:
    when: always
    expire_in: 6 months
    reports:
      junit: "automation/target/cucumber-reports/*.xml"
    paths:
      - "automation/platform_version-*.log"
      - "automation/result_*"

master_autojob:
  extends: .template_automation
  variables:
    PLATFORM_VERSIONS: "7 10 11"
    GRADLE_TASK: "automatedTesting"
  rules:
    - if: '$FORCE_MASTER == "true"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'

dev_regression_autojob:
  extends: .template_automation
  variables:
    PLATFORM_VERSIONS: "10"
    GRADLE_TASK: "regression"
  rules:
    - if: '$FORCE_REGRESSION == "true"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'

dev_functional_autojob:
  extends: .template_automation
  variables:
    PLATFORM_VERSIONS: "7 10 11"
    GRADLE_TASK: "functional"
  rules:
    - if: '$FORCE_FUNCTIONAL == "true"'
    - if: '$CI_COMMIT_BRANCH == "develop" && $CI_PIPELINE_SOURCE == "schedule"'

plt_tests:
  stage: device_tests
  interruptible: true
  tags:
    - "ce11171b5399805a0c"
  retry: 1
  image: "registry.gitlab.com/eyeo/docker/appium:1.16.0"
  variables:
    GIT_STRATEGY: "none"
    PLATFORM_VERSIONS: "10"
    GIT_AUTOMATION_REPO: "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/eyeo/sandbox/abp-webview-test-automation"
    GIT_AUTOMATION_BRANCH: "master"
    TEST_APK: "../adblock-android-webviewapp/build/outputs/apk/debug/adblock-android-webviewapp-debug.apk"
    #Override the real TESTOBJ_PROJECT_KEY so its not accidentally used
    TESTOBJ_PROJECT_KEY: "123"
  before_script:
    - apt-get -y update
    - apt-get -y install openjdk-8-jdk git
    - if [ "${ANDROID_KEY_FILE}" ] ; then cp -f ${ANDROID_KEY_FILE} ~/.android/adbkey; fi
    - if [ "${ANDROID_KEY_PUB_FILE}" ] ; then cp -f ${ANDROID_KEY_PUB_FILE} ~/.android/adbkey.pub; fi
  script:
    - CHROMEDRIVER_AUTODOWNLOAD=true /root/entry_point.sh &> appium.log &
    - echo $! > appium_pid
    - git clone $GIT_AUTOMATION_REPO automation
    - cd automation
    - git checkout ${GIT_AUTOMATION_BRANCH:-master}
    - APPIUM_HOST="localhost:4723" gradle pltWebview
    - kill `cat appium_pid`
  rules:
    - if: '$FORCE_PLT == "true"'
    #- if: '$CI_COMMIT_BRANCH == "develop" && $CI_PIPELINE_SOURCE == "schedule"'
    #- if: '$CI_COMMIT_BRANCH == "develop" && $CI_PIPELINE_SOURCE == "manual"'
  artifacts:
    when: always
    expire_in: 6 months
    reports:
      junit: "automation/target/cucumber-reports/*.xml"
    paths:
      - "automation/plt/webviewPLT.json"
      - "appium.log"


# FilterEngine performance benchmarking and memory
benchmark:
  image: "registry.gitlab.com/finestructure/pipeline-trigger:2.7.0"
  stage: device_tests
  interruptible: true
  variables:
    GIT_STRATEGY: "none"
    TESTING_PROJECT: "24119254" #eyeo/distpartners/libabp-android-perf-testing
    TESTING_BRANCH: "master"
  script:
    # Start the pipeline and exit before it completes
    # The CI_JOB_TOKEN will ensure the downstream job shows in the UI
    - |
      trigger --pipeline-token ${CI_JOB_TOKEN} \
          --target-ref $TESTING_BRANCH \
          --detached \
          --env UPSTREAM_PIPELINE_ID=${CI_PIPELINE_ID} \
          --env UPSTREAM_PROJECT_ID=${CI_PROJECT_ID} \
          --env UPSTREAM_PIPELINE_URL=${CI_PIPELINE_URL} \
          --env UPSTREAM_CI_COMMIT_BRANCH=${CI_COMMIT_BRANCH} \
          --env UPSTREAM_CI_COMMIT_SHA=${CI_COMMIT_SHA} \
          --env UPSTREAM_CI_COMMIT_TAG=${CI_COMMIT_TAG} \
          ${TESTING_PROJECT}
  only:
    - schedules
    - web
    - tags

.publish_template: &publish_template
  stage: publish
  script:
    - *apt-install
    - *npm_path
    - |
      if [[ ${DRY_RUN:-true} == "true" ]] ; then
        echo 'Note: $DRY_RUN is currently "true", run pipeline manually and set to "false" to actually publish to gitlab'
      else
        gradle publish
      fi

publish_rc_to_gitlab:
  <<: *publish_template
  only:
    variables:
      - $RC
  before_script:
    - echo "Publishing release candidate ${RC}"
    # Append '-rcX' to the version to publish
    - sed -i -e "/moduleVersion/s/'$/-rc${RC}'/g" build.gradle

publish_to_gitlab:
  <<: *publish_template
  stage: publish
  only:
    - tags
